
package pulseModels;

import simView.*;
import genDevs.plots.*;
import java.awt.*;
import java.lang.*;
import genDevs.modeling.*;
import genDevs.simulation.*;
import genDevs.simulation.realTime.*;
import GenCol.*;
import pulseExpFrames.*;

import java.util.*;



public class fnIntegration extends  ViewableDigraph{



public fnIntegration(){
super("fnIntegration");

addInport("in");
addOutport("out");

double power = -1;//-3;//-2;//-1;//0;//-.999;//4;
double quantum = .1;

ViewableAtomic fnRateGenr = new fnRateGenr("fnRateGenr",power,quantum);//power,quantum

add(fnRateGenr);





CellGridPlot pulseP = new CellGridPlot("Pulse and Derivative Plot",100,3);
pulseP.setCellGridViewLocation(600,250);
pulseP.setSpaceSize(100,40);
pulseP.setCellSize(5);
pulseP.setTimeScale(5);
add(pulseP);

addCoupling(fnRateGenr,"out",pulseP,"pulsePlot");


ViewableAtomic cl = new myTimer("myTimer",4);
add(cl);

addCoupling(cl,"out",fnRateGenr,"stop");
addCoupling(fnRateGenr,"rate",pulseP,"timePlot");

ViewableAtomic sum = new sum("sum",1);//initial state
add(sum);
addCoupling(fnRateGenr,"out",sum,"in");


CellGridPlot timeP = new CellGridPlot("Integral = Original Function Plot",100,3);
timeP.setCellGridViewLocation(600,500);
timeP.setSpaceSize(100,40);
timeP.setCellSize(5);
timeP.setTimeScale(5);
add(timeP);

addCoupling(sum,"out",timeP,"timePlot");

}
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(641, 336);
        ((ViewableComponent)withName("myTimer")).setPreferredLocation(new Point(129, 132));
        ((ViewableComponent)withName("fnRateGenr")).setPreferredLocation(new Point(-1, 30));
        ((ViewableComponent)withName("sum")).setPreferredLocation(new Point(266, 42));
    }
}
