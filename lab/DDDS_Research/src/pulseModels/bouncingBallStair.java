
package pulseModels;

import simView.*;
import genDevs.plots.*;
import java.awt.*;
import java.lang.*;
import genDevs.modeling.*;
import genDevs.simulation.*;
import GenCol.*;
import pulseExpFrames.*;

import java.util.*;

class groundProfile extends momentumConserve{
protected double initHeight,step,horizVel,clock;

public groundProfile(double loss, double initHeight,
                   double step,double horizVel){
super(loss);
this.initHeight = initHeight;
this.step = step;
this.horizVel = horizVel;
}

public void initialize(){
clock = 0;
super.initialize();
}

public void deltext(double e,message x){
clock += e;
super.deltext(e,x);
}
public message out(){
double horizPos = clock*horizVel;
int steps = (int)Math.floor(horizPos/step);
if (inval<= initHeight - horizPos && outval < 0)
return outputRealOnPort(loss,"out");
else return new message();
}

}


public class bouncingBallStair extends  ViewableDigraph{

public bouncingBallStair(){
this("bb",5,10,.2,.01);
addInport("stop");
}


public bouncingBallStair(String nm, double initPosition,
       double initVelocity, double loss, double quantum){
super(nm);

addInport("in");
addInport("stop");
addOutport("out");


ViewableAtomic gravity = new varGen("gravity",-10,1);
add(gravity);

addCoupling(this,"stop",gravity,"stop");

ViewableAtomic velocity = new sum("velocity",initVelocity);
add(velocity);
addCoupling(this,"in",velocity,"in");
addCoupling(gravity,"out",velocity,"in");


ViewableAtomic velocityGen = new varGen("velocityGen",initVelocity,quantum);
add(velocityGen);
addCoupling(velocity,"out",velocityGen,"setRate");

ViewableAtomic position = new sum("position",initPosition);
add(position);
addCoupling(velocityGen,"out",position,"in");

ViewableAtomic mc = new groundProfile(loss,initPosition,1,1);
add(mc);

addCoupling(position,"out",mc,"in");
addCoupling(mc,"out",velocity,"switchWLoss");



CellGridPlot timeP = new CellGridPlot("Position Plot",1,20);
timeP.setCellGridViewLocation(600,500);
timeP.setSpaceSize(100,40);
timeP.setCellSize(5);
timeP.setTimeScale(10);
add(timeP);

addCoupling(position,"out",timeP,"timePlot");//"pulsePlot");

}

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(549, 253);
        ((ViewableComponent)withName("velocityGen")).setPreferredLocation(new Point(-26, 98));
        ((ViewableComponent)withName("position")).setPreferredLocation(new Point(244, 110));
        ((ViewableComponent)withName("velocity")).setPreferredLocation(new Point(242, 29));
        ((ViewableComponent)withName("gravity")).setPreferredLocation(new Point(-20, 24));
        ((ViewableComponent)withName("momentumConserve")).setPreferredLocation(new Point(61, 176));
    }
}
