
package pulseModels;

import simView.*;
import genDevs.plots.*;
import java.awt.*;
import java.lang.*;
import genDevs.modeling.*;
import genDevs.simulation.*;
import GenCol.*;
import pulseExpFrames.*;
import java.util.*;



public class swimStroke extends  ViewableDigraph{

public swimStroke(){
super("swimStroke");

addInport("in");
addOutport("out");

double fastturnoverRate = 30; //cycles/min
double faststrokeTempo = 60/fastturnoverRate;//1.2; //seconds
double fastdistancePerStroke = 4; //yds

double slowturnoverRate = 20; //cycles/min
double slowstrokeTempo = 60/slowturnoverRate;//1.2; //seconds
double slowdistancePerStroke = 5; //yds

double poolSize = 25;//yards
double numberOfLaps = 2;
double lengthOfSwim = poolSize*numberOfLaps;

ViewableAtomic fastNshort = new pulseGenr("fastNshort",faststrokeTempo,fastdistancePerStroke);//interPulseTime,size
add(fastNshort);


ViewableAtomic fastNshortDistance = new sum("fastNshortDistance",0);
add(fastNshortDistance);
addCoupling(fastNshort,"out",fastNshortDistance,"in");


ViewableDigraph fastNshortEstimate = new rateEstimator("fastNshortEstimate",lengthOfSwim);
add(fastNshortEstimate);
fastNshortEstimate.setBlackBox(true);

addCoupling(fastNshort,"out",fastNshortEstimate,"in");
addCoupling(fastNshortEstimate,"rate",fastNshort,"stop");

ViewableAtomic fs = new varDisplay("fs");
add(fs);
addCoupling(fastNshortEstimate,"timeIs",fs,"in");

CellGridPlot fastNshortPlot = new CellGridPlot("fastNshortDistance Plot",1,100);
fastNshortPlot.setCellGridViewLocation(600,250);
fastNshortPlot.setSpaceSize(100,40);
fastNshortPlot.setCellSize(5);
fastNshortPlot.setTimeScale(50);
add(fastNshortPlot);
addCoupling(fastNshortDistance,"out",fastNshortPlot,"pulsePlot");

ViewableAtomic slowNlong = new pulseGenr("slowNlong",slowstrokeTempo,slowdistancePerStroke);

add(slowNlong);

ViewableAtomic slowNlongDistance = new sum("slowNlongDistance",0);
add(slowNlongDistance);
addCoupling(slowNlong,"out",slowNlongDistance,"in");

ViewableDigraph slowNlongEstimate = new rateEstimator("slowNlongEstimate",lengthOfSwim);
add(slowNlongEstimate);
slowNlongEstimate.setBlackBox(true);

addCoupling(slowNlong,"out",slowNlongEstimate,"in");
addCoupling(slowNlongEstimate,"rate",slowNlong,"stop");


ViewableAtomic sl = new varDisplay("sl");
add(sl);
addCoupling(slowNlongEstimate,"timeIs",sl,"in");

CellGridPlot slowNlongPlot = new CellGridPlot("slowNlongDistance Plot",1,100);
slowNlongPlot.setCellGridViewLocation(600,500);
slowNlongPlot.setSpaceSize(100,40);
slowNlongPlot.setCellSize(5);
slowNlongPlot.setTimeScale(50);
add(slowNlongPlot);

addCoupling(slowNlongDistance,"out",slowNlongPlot,"pulsePlot");


}
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(760, 337);
        ((ViewableComponent)withName("sl")).setPreferredLocation(new Point(-36, 93));
        ((ViewableComponent)withName("fastNshortDistance")).setPreferredLocation(new Point(261, 27));
        ((ViewableComponent)withName("fastNshortEstimate")).setPreferredLocation(new Point(200, 107));
        ((ViewableComponent)withName("fastNshort")).setPreferredLocation(new Point(-5, 16));
        ((ViewableComponent)withName("slowNlongDistance")).setPreferredLocation(new Point(275, 162));
        ((ViewableComponent)withName("slowNlong")).setPreferredLocation(new Point(-15, 148));
        ((ViewableComponent)withName("fs")).setPreferredLocation(new Point(496, 23));
        ((ViewableComponent)withName("slowNlongEstimate")).setPreferredLocation(new Point(233, 248));
    }
}
