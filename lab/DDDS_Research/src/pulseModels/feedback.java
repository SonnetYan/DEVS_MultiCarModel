package pulseModels;

import simView.*;
import genDevs.plots.*;
import java.awt.*;
import java.lang.*;
import genDevs.modeling.*;
import genDevs.simulation.*;
import GenCol.*;
import pulseExpFrames.*;

import java.util.*;



public class feedback extends  ViewableDigraph{

public feedback(){
this("fb",-.05,100,5);addInport("stop");
addTestInput("stop",new entity());
}


public feedback(String nm, double coeff, double initState, double quantum){
super(nm);

addInport("in");
addInport("stop");
addOutport("out");


ViewableAtomic fb =
   new linearGen("linear"+nm,coeff,quantum);//coefficient,quantum ==>negative feedback
 //new linearGen(nm,.01,5);//coefficient,quantum ==>positive feedback
add(fb);

addCoupling(this,"stop",fb,"stop");
/*
CellGridPlot pulseP = new CellGridPlot("Pulse Plot",1,3);
pulseP.setCellGridViewLocation(600,250);
pulseP.setSpaceSize(100,40);
pulseP.setCellSize(5);
pulseP.setTimeScale(50);
add(pulseP);

addCoupling(fb,"out",pulseP,"pulsePlot");
*/

ViewableAtomic sum = new sum("sum",initState);//initState
add(sum);
addCoupling(this,"in",sum,"in");
addCoupling(fb,"out",sum,"in");
addCoupling(sum,"out",fb,"setInput");
addCoupling(sum,"out",this,"out");

/*
CellGridPlot timeP = new CellGridPlot("Sum Plot",1,300);
timeP.setCellGridViewLocation(600,500);
timeP.setSpaceSize(100,40);
timeP.setCellSize(5);
timeP.setTimeScale(50);
add(timeP);

addCoupling(sum,"out",timeP,"pulsePlot");
*/
}
    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(472, 222);
        ((ViewableComponent)withName("sum")).setPreferredLocation(new Point(165, 29));
        ((ViewableComponent)withName("linearfb")).setPreferredLocation(new Point(0, 111));
    }
}
