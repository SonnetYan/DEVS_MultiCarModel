
package oneDCellSpace;




import java.lang.*;
import java.awt.*;
import java.io.*;
import java.util.*;
import genDevs.modeling.*;
import genDevs.plots.*;
import genDevs.simulation.*;
import GenCol.*;
import util.*;
import simView.*;

class diffuseCell extends oneDimCell{
protected double speed = .1,quantum = .05;
protected double myPos,leftPos,rightPos,nextPos;
protected boolean first;

public diffuseCell(){
this(0);
}

public diffuseCell(int id){
super(id);
addInport("inLeft");
addInport("inRight");
addOutport("outPair");
addOutport("outPos");
}


public void initialize(){
super.initialize();
first = true;
myPos = leftPos = rightPos = nextPos = quantum;
if (id == 0|| id == 10 ||id == 20){
myPos = 100;
nextPos = myPos;
}
holdIn("active",0);
}


  public static int signOf(double x){
      if (x == 0) return 0;
      else if (x > 0) return 1;
      else return -1;
  }
  public static double inv(double x){
      if (x == 0) return Double.POSITIVE_INFINITY;
      else if (x >= Double.POSITIVE_INFINITY ) return 0;
      else return 1/x;
  }


public void deltext(double e,message x){
Continue(e);
if (somethingOnPort(x,"inLeft"))
leftPos = getRealValueOnPort(x,"inLeft");
if (somethingOnPort(x,"inRight"))
rightPos = getRealValueOnPort(x,"inRight");
if (first){
nextPos = myPos+ quantum*signOf(deriv());
holdIn("active",timeAdvance(quantum));
if (sigma < INFINITY)
first = false;
}
else{
update(e);
if (myPos >= nextPos)deltint();
else
holdIn("active",timeAdvance(nextPos - myPos));
}
}

public double timeAdvance(double difference){
if (deriv() == 0)return INFINITY;
return Math.abs(difference/deriv());
}

public double spatialDeriv(){
return avgNeighPos() - myPos;
}

public double deriv(){
return speed*spatialDeriv();
}

public double avgNeighPos(){
return (leftPos + rightPos)/2;
}

public void update(double elapsed){
myPos += elapsed*deriv();
}


public void   deltint(){
numTransitions++;
myPos = nextPos*.999;
nextPos = myPos+ quantum*signOf(deriv());
if (nextPos < 1)
passivate();
else
holdIn("active",timeAdvance(quantum));
}

public void deltcon(double e,message x){
deltext(e,x);
}
double log10Be = 1/Math.log(10);

public message out(){

message m = super.out();

m.add(makeContent("outDraw",  new DrawCellEntity("drawCellToScale",
       drawPos, nextPos)));
       //log10Be*Math.log(nextPos/quantum))));
m.add(makeContent("outPair", new Pair(new Integer(id),
                             new Double(nextPos))));
m.add(makeContent("outDrawTime", new doubleEnt(nextPos)));
return outputRealOnPort(m,nextPos,"outPos");

}


public String getTooltipText(){
   return
   super.getTooltipText()
    +"\n"+" myPos: "+ myPos
    +"\n"+" nextPos: "+ nextPos
      +"\n"+" rightPos: "+ rightPos
    +"\n"+" leftPos: "+ leftPos;
  }

}

public class diffuseCellSpace extends oneDimCellSpace{

public diffuseCellSpace(){
this(40);
}

public diffuseCellSpace(int numCells){
super("diffuseCellSpace "+numCells);
addInport("outPair");

diffuseCell.numCells = numCells;


for (int i = 0;i<numCells;i++)
  addCell(i,new diffuseCell(i));

//
hideAll();  //hides only components so far


doNeighborCoupling(1,"outPos","inLeft");//to right on inLeft
doNeighborCoupling(-1,"outPos","inRight");//to left on inRight

activityTrans m = new activityTrans("minmaxIndiv", numCells);
add(m);
coupleAllTo("outPair",m,"inPair");

addPlots(100,1400,100); //at end so that will not be coupled in

}



    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(900, 1300);
        ((ViewableComponent)withName("cell_0")).setPreferredLocation(new Point(-57, 53));
        ((ViewableComponent)withName("cell_2")).setPreferredLocation(new Point(410, 50));
        ((ViewableComponent)withName("cell_3")).setPreferredLocation(new Point(10, 100));
        ((ViewableComponent)withName("cell_1")).setPreferredLocation(new Point(210, 40));
        ((ViewableComponent)withName("minmaxIndiv")).setPreferredLocation(new Point(195, 157));
    }
}
