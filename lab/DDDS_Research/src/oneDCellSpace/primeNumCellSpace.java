package  oneDCellSpace;

import simView.*;
import genDevs.modeling.*;
import genDevs.simulation.*;
import GenCol.*;
import genDevs.plots.*;
import util.*;
import java.awt.*;


public class primeNumCellSpace  extends oneDimCellSpace{


////////////////// Define primeNumCell first ////////////////
class primeNumCell extends oneDimCell{

protected int input;
protected int N = 2;

public primeNumCell(int id){
super(id);
N = id;    // not necessary
addInport("in");
addInport("inPrime");
addOutport("out");
addOutport("outPrime");  // to transmit primes

intEnt i2 = new intEnt(2);
addTestInput("in", i2);
}

public primeNumCell(){
this(0);
}
/*
// The New function Added by Huoping.
public int getIntValueOnPort(message x,String port){
for (int i=0; i< x.getLength();i++)
   if (messageOnPort(x,port,i)){
    intEnt dv = (intEnt)x.getValOnPort(port,i);
    return dv.getv();
    }
return 0;this.getI
}
*/

public void addPrimeNeighbor(){
addNeighbor(1,new primeNumCell(id+1));
addNeighborCoupling(1,"out","in");
addNeighborCoupling(1,"outPrime","inPrime");
//addCoupling("cell_"+(id+1),"outMove","Pascal Move Plot","drawCellToScale");
}

public message outputIntOnPort(message m,int r,String port){
  m.add(makeContent(port,new intEnt(r)));
  return m;
}


public void initialize(){
  super.initialize();
  passivateIn("Temp");
  if (N==2){

  holdIn("outPrime",2);
  }
}

public void deltext(double e,message x)
{
addPrimeNeighbor();
  Continue(e);
  if (somethingOnPort(x,"in")){
      input = getIntValueOnPort(x,"in");
     if (phaseIs("Temp") && input == (N-1))
         holdIn("outPrime",N);
    else if (phaseIs("Composite") && input == (N-1))
         holdIn("lastComposite",N);
         }

   else

  if (somethingOnPort(x,"inPrime"))
  {
    input = getIntValueOnPort(x,"inPrime");
    if (phaseIs("Temp")|| phaseIs("Composite")){

        if ( (N%input) == 0 )
          holdIn("Composite", input); //not 1 /input
        else
       sigma = input;//stay in same phase

    }
  }
}

public void   deltint()
{
this.numTransitions++;
if (phaseIs("outPrime"))
   passivateIn("Prime");

if (phaseIs("Temp")){
 if ( input == (N-1))
         holdIn("outPrime",N);
         }
  if (phaseIs("Composite")){
     if ( input == (N-1))
         holdIn("lastComposite",N);
     else
       passivateIn("Composite");
       }
  else if (phaseIs("lastComposite"))
        passivateIn("Composite");
}


public message out(){

message m = super.out();
if (phaseIs("outPrime")){
m.add(makeContent("outDraw",  new DrawCellEntity("drawCellToScale",
       drawPos, N)));
    m = outputIntOnPort(m,N,"outPrime");
          }
  if (phaseIs("Temp")&& N ==3 && input == 2)
      m = outputIntOnPort(m,input,"outPrime");
  if ( phaseIs("Composite") || phaseIs("Temp") && input != N-1)

    m = outputIntOnPort(m,input,"outPrime");  // Pass the input into output
  else if ( phaseIs("lastComposite"))

    m = outputIntOnPort(m,N,"out");
return m;
}


public String getTooltipText(){
   return
  super.getTooltipText()
  +"\n"+"Input :"+ input
  +"\n"+"N :"+ N;
  }

}
////////// End of primeNumCell /////////////////////////////




public primeNumCellSpace (){
this(100);
}

public primeNumCellSpace(int numCells){
super("primeNumCellSpace" );

 addInport("stop");
 addOutport("out");
 addOutport("outPair");



primeNumCell.numCells = numCells;

//for (int i = 2;i< numCells;i++)
//  addCell(i,new primeNumCell(i));

addCell(2,new primeNumCell(2));
addCell(3,new primeNumCell(3));




 //
  doNeighborCoupling(+1,"out","in");
 //
 doNeighborCoupling(+1,"outPrime","inPrime");



//addPlots(2*numCells,100,200);//stateMax,transitionMax,timeMax
   //at end so that will not be coupled in
}



    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(900, 1300);
        ((ViewableComponent)withName("cell_3")).setPreferredLocation(new Point(123, 192));
        ((ViewableComponent)withName("cell_2")).setPreferredLocation(new Point(49, 52));
    }
}
