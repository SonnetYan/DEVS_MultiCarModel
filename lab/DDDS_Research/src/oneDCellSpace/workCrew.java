
package  oneDCellSpace;

import simView.*;
import genDevs.modeling.*;
import genDevs.simulation.*;
import GenCol.*;
import genDevs.plots.*;
import util.*;
import java.awt.*;
import pulseExpFrames.*;
import pulseModels.*;




public class workCrew extends ViewableDigraph{

public workCrew(){
this(4,5);
}

public workCrew(int numWorkers,double a){
super("workCrew"+numWorkers);
addInport("stop");
addOutport("timeIs");


workerCellSpace ws = new workerCellSpace(numWorkers,a);
add(ws);
// ws.setBlackBox(true);


addCoupling(this,"stop",ws,"stop");

rateEstimator r = new rateEstimator("rate",1000);
add(r);
//r.setHidden(true);r.setBlackBox(true);
addCoupling(r,"timeIs",this,"timeIs");

addCoupling(ws,"out",r,"in");
addCoupling(r,"timeIs",ws,"stop");

varDisplay v = new varDisplay("time");
add(v);

addCoupling(r,"timeIs",v,"in");
}

}

class workerCellSpace  extends oneDimCellSpace{

/////////////////////////////////////////////

class workerCell extends oneDimCell{
//public class varGen extends  realDevs{
protected int direction; //1,0,-1
protected double initRate,rate,quantum = 1;



public double rateFn(){//override
return rate;
}

public double signedTimeAdvance(){//override
return quantum*realDevs.inv(rateFn());
}

public int nextDirection(){
  double sta = signedTimeAdvance();
  return realDevs.signOf(sta);
}

protected int numWorkers;

public workerCell(int id,double rate,double quantum,int numWorkers){
super(id);
initRate = rate;
this.numWorkers = numWorkers;
this.quantum = quantum;
addInport("start");
addInport("stop");
addInport("setRate");
addOutport("out");
addOutport("outPos");
addRealTestInput("setRate",5,0);
addRealTestInput("setRate",-5,0);
}

public workerCell(int id,double rate){
this(id,rate,1,10);
}


public void initialize(){
super.initialize();
rate = initRate;
direction = nextDirection();
holdIn("active ",Math.abs(signedTimeAdvance()));
//holdIn("active ",r.uniform(Math.abs(signedTimeAdvance())));
}

public void deltext(double e,message x){
Continue(e);
if (somethingOnPort(x,"setRate")){
  rate =  initRate/numWorkers;//getRealValueOnPort(x,"setRate");
  double minSig = Math.min(sigma,Math.abs(signedTimeAdvance()));
    //this is needed where rate keeps decreasing
  holdIn("active",minSig);
}
else if (somethingOnPort(x,"start"))
 holdIn("active",Math.abs(signedTimeAdvance()));
else if (somethingOnPort(x,"stop"))
  passivate();
}

public void deltint(){
holdIn("active",Math.abs(signedTimeAdvance()));
}

public void deltcon(double e,message x)
{
 deltint();
 deltext(0,x);
}

public message out(){
message m = outputRealOnPort(quantum*nextDirection(),"out");
return outputRealOnPort(m,quantum*Math.abs(nextDirection()),"outPos");
}

public void showState(){
   super.showState();
   System.out.println(
    "\n"+" rate: "+ rate);
  }

public String getTooltipText(){
   return
   super.getTooltipText()
    +"\n"+" rate: "+ rate;
  }


 }



/////////////////////


public workerCellSpace (){
this(4,5);
}

public workerCellSpace(int numWorkers,double a){//workers, interference factor
super("workerCellSpace" +numWorkers);

addInport("stop");
addOutport("out");
addOutport("outPair");


//workerCell.numCells = numWorkers;



for (int i = 0;i<numWorkers;i++)
  addCell(i,new workerCell(i,1,1,numWorkers));

//hideAll();  //hides only components so fa




coupleAllTo("out",this,"out");
coupleOneToAll(this,"stop","stop");

ViewableAtomic houseBricks = new sum("houseBricks",0);//state,
add(houseBricks);

coupleAllTo("out",houseBricks,"in");

ViewableAtomic t = new thresholdTester(1000-a*numWorkers);
add(t);

addCoupling(houseBricks,"out",t,"in");
coupleOneToAll(t,"out","setRate"); //

//addPlots(3000,500,200);//stateMax,transitionMax,timeMax
   //at end so that will not be coupled in
}


    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(625, 341);
        ((ViewableComponent)withName("rate")).setPreferredLocation(new Point(104, 49));
        ((ViewableComponent)withName("workerCellSpace4")).setPreferredLocation(new Point(145, 208));
        ((ViewableComponent)withName("time")).setPreferredLocation(new Point(340, 56));
    }
}
